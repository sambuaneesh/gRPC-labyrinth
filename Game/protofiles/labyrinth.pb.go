// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.2
// source: labyrinth.proto

package labyrinth

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Direction int32

const (
	Direction_UP    Direction = 0
	Direction_DOWN  Direction = 1
	Direction_LEFT  Direction = 2
	Direction_RIGHT Direction = 3
)

// Enum value maps for Direction.
var (
	Direction_name = map[int32]string{
		0: "UP",
		1: "DOWN",
		2: "LEFT",
		3: "RIGHT",
	}
	Direction_value = map[string]int32{
		"UP":    0,
		"DOWN":  1,
		"LEFT":  2,
		"RIGHT": 3,
	}
)

func (x Direction) Enum() *Direction {
	p := new(Direction)
	*p = x
	return p
}

func (x Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_labyrinth_proto_enumTypes[0].Descriptor()
}

func (Direction) Type() protoreflect.EnumType {
	return &file_labyrinth_proto_enumTypes[0]
}

func (x Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Direction.Descriptor instead.
func (Direction) EnumDescriptor() ([]byte, []int) {
	return file_labyrinth_proto_rawDescGZIP(), []int{0}
}

type MoveStatus int32

const (
	MoveStatus_SUCCESS MoveStatus = 0
	MoveStatus_FAILURE MoveStatus = 1
	MoveStatus_VICTORY MoveStatus = 2
	MoveStatus_DEATH   MoveStatus = 3
)

// Enum value maps for MoveStatus.
var (
	MoveStatus_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILURE",
		2: "VICTORY",
		3: "DEATH",
	}
	MoveStatus_value = map[string]int32{
		"SUCCESS": 0,
		"FAILURE": 1,
		"VICTORY": 2,
		"DEATH":   3,
	}
)

func (x MoveStatus) Enum() *MoveStatus {
	p := new(MoveStatus)
	*p = x
	return p
}

func (x MoveStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MoveStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_labyrinth_proto_enumTypes[1].Descriptor()
}

func (MoveStatus) Type() protoreflect.EnumType {
	return &file_labyrinth_proto_enumTypes[1]
}

func (x MoveStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MoveStatus.Descriptor instead.
func (MoveStatus) EnumDescriptor() ([]byte, []int) {
	return file_labyrinth_proto_rawDescGZIP(), []int{1}
}

type TileType int32

const (
	TileType_EMPTY TileType = 0
	TileType_WALL  TileType = 1
	TileType_COIN  TileType = 2
)

// Enum value maps for TileType.
var (
	TileType_name = map[int32]string{
		0: "EMPTY",
		1: "WALL",
		2: "COIN",
	}
	TileType_value = map[string]int32{
		"EMPTY": 0,
		"WALL":  1,
		"COIN":  2,
	}
)

func (x TileType) Enum() *TileType {
	p := new(TileType)
	*p = x
	return p
}

func (x TileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TileType) Descriptor() protoreflect.EnumDescriptor {
	return file_labyrinth_proto_enumTypes[2].Descriptor()
}

func (TileType) Type() protoreflect.EnumType {
	return &file_labyrinth_proto_enumTypes[2]
}

func (x TileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TileType.Descriptor instead.
func (TileType) EnumDescriptor() ([]byte, []int) {
	return file_labyrinth_proto_rawDescGZIP(), []int{2}
}

// -------------------------------------------------------------------------------------------------
// # GetLabyrinthInfo
// Take an empty request and provide the width and height of the Labyrinth.
type GetLabyrinthInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetLabyrinthInfoRequest) Reset() {
	*x = GetLabyrinthInfoRequest{}
	mi := &file_labyrinth_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLabyrinthInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLabyrinthInfoRequest) ProtoMessage() {}

func (x *GetLabyrinthInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_labyrinth_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLabyrinthInfoRequest.ProtoReflect.Descriptor instead.
func (*GetLabyrinthInfoRequest) Descriptor() ([]byte, []int) {
	return file_labyrinth_proto_rawDescGZIP(), []int{0}
}

type GetLabyrinthInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Width  int32 `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`
	Height int32 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *GetLabyrinthInfoResponse) Reset() {
	*x = GetLabyrinthInfoResponse{}
	mi := &file_labyrinth_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLabyrinthInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLabyrinthInfoResponse) ProtoMessage() {}

func (x *GetLabyrinthInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_labyrinth_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLabyrinthInfoResponse.ProtoReflect.Descriptor instead.
func (*GetLabyrinthInfoResponse) Descriptor() ([]byte, []int) {
	return file_labyrinth_proto_rawDescGZIP(), []int{1}
}

func (x *GetLabyrinthInfoResponse) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *GetLabyrinthInfoResponse) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

// -------------------------------------------------------------------------------------------------
// # GetPlayerStatus
// Take an empty request and provide the playerâ€™s score, health points, current position
// in the Labyrinth and the number of remaining spells
type GetPlayerStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetPlayerStatusRequest) Reset() {
	*x = GetPlayerStatusRequest{}
	mi := &file_labyrinth_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPlayerStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlayerStatusRequest) ProtoMessage() {}

func (x *GetPlayerStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_labyrinth_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlayerStatusRequest.ProtoReflect.Descriptor instead.
func (*GetPlayerStatusRequest) Descriptor() ([]byte, []int) {
	return file_labyrinth_proto_rawDescGZIP(), []int{2}
}

type GetPlayerStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score           int32     `protobuf:"varint,1,opt,name=score,proto3" json:"score,omitempty"`
	Health          int32     `protobuf:"varint,2,opt,name=health,proto3" json:"health,omitempty"`
	Position        *Position `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
	RemainingSpells int32     `protobuf:"varint,4,opt,name=remaining_spells,json=remainingSpells,proto3" json:"remaining_spells,omitempty"`
}

func (x *GetPlayerStatusResponse) Reset() {
	*x = GetPlayerStatusResponse{}
	mi := &file_labyrinth_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPlayerStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlayerStatusResponse) ProtoMessage() {}

func (x *GetPlayerStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_labyrinth_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlayerStatusResponse.ProtoReflect.Descriptor instead.
func (*GetPlayerStatusResponse) Descriptor() ([]byte, []int) {
	return file_labyrinth_proto_rawDescGZIP(), []int{3}
}

func (x *GetPlayerStatusResponse) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *GetPlayerStatusResponse) GetHealth() int32 {
	if x != nil {
		return x.Health
	}
	return 0
}

func (x *GetPlayerStatusResponse) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *GetPlayerStatusResponse) GetRemainingSpells() int32 {
	if x != nil {
		return x.RemainingSpells
	}
	return 0
}

type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X int32 `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y int32 `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *Position) Reset() {
	*x = Position{}
	mi := &file_labyrinth_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_labyrinth_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_labyrinth_proto_rawDescGZIP(), []int{4}
}

func (x *Position) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Position) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

// -------------------------------------------------------------------------------------------------
// # RegisterMove
// Take a request containing the desired direction to move and move the player in that
// direction. Provide the status of the move informing the client whether the move
// 1. was a success, 2. was a failure, 3. lead to victory or 4. resulted in player death.
type RegisterMoveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction Direction `protobuf:"varint,1,opt,name=direction,proto3,enum=Direction" json:"direction,omitempty"`
}

func (x *RegisterMoveRequest) Reset() {
	*x = RegisterMoveRequest{}
	mi := &file_labyrinth_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterMoveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterMoveRequest) ProtoMessage() {}

func (x *RegisterMoveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_labyrinth_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterMoveRequest.ProtoReflect.Descriptor instead.
func (*RegisterMoveRequest) Descriptor() ([]byte, []int) {
	return file_labyrinth_proto_rawDescGZIP(), []int{5}
}

func (x *RegisterMoveRequest) GetDirection() Direction {
	if x != nil {
		return x.Direction
	}
	return Direction_UP
}

type RegisterMoveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status MoveStatus `protobuf:"varint,1,opt,name=status,proto3,enum=MoveStatus" json:"status,omitempty"`
}

func (x *RegisterMoveResponse) Reset() {
	*x = RegisterMoveResponse{}
	mi := &file_labyrinth_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterMoveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterMoveResponse) ProtoMessage() {}

func (x *RegisterMoveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_labyrinth_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterMoveResponse.ProtoReflect.Descriptor instead.
func (*RegisterMoveResponse) Descriptor() ([]byte, []int) {
	return file_labyrinth_proto_rawDescGZIP(), []int{6}
}

func (x *RegisterMoveResponse) GetStatus() MoveStatus {
	if x != nil {
		return x.Status
	}
	return MoveStatus_SUCCESS
}

// -------------------------------------------------------------------------------------------------
// # Revelio
// Take a request containing the target position of the spell and the desired tile type.
// Provide a stream of positions of all the tiles surrounding the target tile having the same
// tile type as the one in the request. Note that the target tile is also included under the
// spell effect.
type RevelioRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target   *Position `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	TileType TileType  `protobuf:"varint,2,opt,name=tile_type,json=tileType,proto3,enum=TileType" json:"tile_type,omitempty"`
}

func (x *RevelioRequest) Reset() {
	*x = RevelioRequest{}
	mi := &file_labyrinth_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RevelioRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevelioRequest) ProtoMessage() {}

func (x *RevelioRequest) ProtoReflect() protoreflect.Message {
	mi := &file_labyrinth_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevelioRequest.ProtoReflect.Descriptor instead.
func (*RevelioRequest) Descriptor() ([]byte, []int) {
	return file_labyrinth_proto_rawDescGZIP(), []int{7}
}

func (x *RevelioRequest) GetTarget() *Position {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *RevelioRequest) GetTileType() TileType {
	if x != nil {
		return x.TileType
	}
	return TileType_EMPTY
}

type RevelioResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position *Position `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *RevelioResponse) Reset() {
	*x = RevelioResponse{}
	mi := &file_labyrinth_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RevelioResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevelioResponse) ProtoMessage() {}

func (x *RevelioResponse) ProtoReflect() protoreflect.Message {
	mi := &file_labyrinth_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevelioResponse.ProtoReflect.Descriptor instead.
func (*RevelioResponse) Descriptor() ([]byte, []int) {
	return file_labyrinth_proto_rawDescGZIP(), []int{8}
}

func (x *RevelioResponse) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

// -------------------------------------------------------------------------------------------------
// # Bombarda
// Take a stream of target positions as input. Destroy anything that may be present on
// the target tiles (wall or coin), converting them into an empty tile.
type BombardaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target *Position `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *BombardaRequest) Reset() {
	*x = BombardaRequest{}
	mi := &file_labyrinth_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BombardaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BombardaRequest) ProtoMessage() {}

func (x *BombardaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_labyrinth_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BombardaRequest.ProtoReflect.Descriptor instead.
func (*BombardaRequest) Descriptor() ([]byte, []int) {
	return file_labyrinth_proto_rawDescGZIP(), []int{9}
}

func (x *BombardaRequest) GetTarget() *Position {
	if x != nil {
		return x.Target
	}
	return nil
}

type BombardaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success          bool      `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	AffectedPosition *Position `protobuf:"bytes,2,opt,name=affected_position,json=affectedPosition,proto3" json:"affected_position,omitempty"`
}

func (x *BombardaResponse) Reset() {
	*x = BombardaResponse{}
	mi := &file_labyrinth_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BombardaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BombardaResponse) ProtoMessage() {}

func (x *BombardaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_labyrinth_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BombardaResponse.ProtoReflect.Descriptor instead.
func (*BombardaResponse) Descriptor() ([]byte, []int) {
	return file_labyrinth_proto_rawDescGZIP(), []int{10}
}

func (x *BombardaResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *BombardaResponse) GetAffectedPosition() *Position {
	if x != nil {
		return x.AffectedPosition
	}
	return nil
}

var File_labyrinth_proto protoreflect.FileDescriptor

var file_labyrinth_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x6c, 0x61, 0x62, 0x79, 0x72, 0x69, 0x6e, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x19, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x79, 0x72, 0x69, 0x6e, 0x74,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x48, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x79, 0x72, 0x69, 0x6e, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x18, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x99, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x25, 0x0a, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x70, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x73, 0x22, 0x26, 0x0a, 0x08,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x01, 0x79, 0x22, 0x3f, 0x0a, 0x13, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a,
	0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3b, 0x0a, 0x14, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e,
	0x4d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x5b, 0x0a, 0x0e, 0x52, 0x65, 0x76, 0x65, 0x6c, 0x69, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x09, 0x74, 0x69, 0x6c, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x54, 0x69, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x74, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x38, 0x0a, 0x0f, 0x52, 0x65, 0x76, 0x65, 0x6c, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x25, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x34, 0x0a, 0x0f, 0x42, 0x6f, 0x6d,
	0x62, 0x61, 0x72, 0x64, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22,
	0x64, 0x0a, 0x10, 0x42, 0x6f, 0x6d, 0x62, 0x61, 0x72, 0x64, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x36, 0x0a,
	0x11, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x10, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2a, 0x32, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x06, 0x0a, 0x02, 0x55, 0x50, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f,
	0x57, 0x4e, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x02, 0x12, 0x09,
	0x0a, 0x05, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x03, 0x2a, 0x3e, 0x0a, 0x0a, 0x4d, 0x6f, 0x76,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x49, 0x43, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x02, 0x12, 0x09,
	0x0a, 0x05, 0x44, 0x45, 0x41, 0x54, 0x48, 0x10, 0x03, 0x2a, 0x29, 0x0a, 0x08, 0x54, 0x69, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x57, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x4f,
	0x49, 0x4e, 0x10, 0x02, 0x32, 0xc0, 0x02, 0x0a, 0x0d, 0x4c, 0x61, 0x62, 0x79, 0x72, 0x69, 0x6e,
	0x74, 0x68, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x62,
	0x79, 0x72, 0x69, 0x6e, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x2e, 0x47, 0x65, 0x74,
	0x4c, 0x61, 0x62, 0x79, 0x72, 0x69, 0x6e, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x79, 0x72, 0x69,
	0x6e, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x44, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x17, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x4d, 0x6f, 0x76, 0x65, 0x12, 0x14, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x52, 0x65, 0x76, 0x65, 0x6c, 0x69, 0x6f, 0x12, 0x0f, 0x2e,
	0x52, 0x65, 0x76, 0x65, 0x6c, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10,
	0x2e, 0x52, 0x65, 0x76, 0x65, 0x6c, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x30, 0x01, 0x12, 0x33, 0x0a, 0x08, 0x42, 0x6f, 0x6d, 0x62, 0x61, 0x72, 0x64, 0x61, 0x12, 0x10,
	0x2e, 0x42, 0x6f, 0x6d, 0x62, 0x61, 0x72, 0x64, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x11, 0x2e, 0x42, 0x6f, 0x6d, 0x62, 0x61, 0x72, 0x64, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x42, 0x0d, 0x5a, 0x0b, 0x2e, 0x2f, 0x6c, 0x61, 0x62,
	0x79, 0x72, 0x69, 0x6e, 0x74, 0x68, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_labyrinth_proto_rawDescOnce sync.Once
	file_labyrinth_proto_rawDescData = file_labyrinth_proto_rawDesc
)

func file_labyrinth_proto_rawDescGZIP() []byte {
	file_labyrinth_proto_rawDescOnce.Do(func() {
		file_labyrinth_proto_rawDescData = protoimpl.X.CompressGZIP(file_labyrinth_proto_rawDescData)
	})
	return file_labyrinth_proto_rawDescData
}

var file_labyrinth_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_labyrinth_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_labyrinth_proto_goTypes = []any{
	(Direction)(0),                   // 0: Direction
	(MoveStatus)(0),                  // 1: MoveStatus
	(TileType)(0),                    // 2: TileType
	(*GetLabyrinthInfoRequest)(nil),  // 3: GetLabyrinthInfoRequest
	(*GetLabyrinthInfoResponse)(nil), // 4: GetLabyrinthInfoResponse
	(*GetPlayerStatusRequest)(nil),   // 5: GetPlayerStatusRequest
	(*GetPlayerStatusResponse)(nil),  // 6: GetPlayerStatusResponse
	(*Position)(nil),                 // 7: Position
	(*RegisterMoveRequest)(nil),      // 8: RegisterMoveRequest
	(*RegisterMoveResponse)(nil),     // 9: RegisterMoveResponse
	(*RevelioRequest)(nil),           // 10: RevelioRequest
	(*RevelioResponse)(nil),          // 11: RevelioResponse
	(*BombardaRequest)(nil),          // 12: BombardaRequest
	(*BombardaResponse)(nil),         // 13: BombardaResponse
}
var file_labyrinth_proto_depIdxs = []int32{
	7,  // 0: GetPlayerStatusResponse.position:type_name -> Position
	0,  // 1: RegisterMoveRequest.direction:type_name -> Direction
	1,  // 2: RegisterMoveResponse.status:type_name -> MoveStatus
	7,  // 3: RevelioRequest.target:type_name -> Position
	2,  // 4: RevelioRequest.tile_type:type_name -> TileType
	7,  // 5: RevelioResponse.position:type_name -> Position
	7,  // 6: BombardaRequest.target:type_name -> Position
	7,  // 7: BombardaResponse.affected_position:type_name -> Position
	3,  // 8: LabyrinthGame.GetLabyrinthInfo:input_type -> GetLabyrinthInfoRequest
	5,  // 9: LabyrinthGame.GetPlayerStatus:input_type -> GetPlayerStatusRequest
	8,  // 10: LabyrinthGame.RegisterMove:input_type -> RegisterMoveRequest
	10, // 11: LabyrinthGame.Revelio:input_type -> RevelioRequest
	12, // 12: LabyrinthGame.Bombarda:input_type -> BombardaRequest
	4,  // 13: LabyrinthGame.GetLabyrinthInfo:output_type -> GetLabyrinthInfoResponse
	6,  // 14: LabyrinthGame.GetPlayerStatus:output_type -> GetPlayerStatusResponse
	9,  // 15: LabyrinthGame.RegisterMove:output_type -> RegisterMoveResponse
	11, // 16: LabyrinthGame.Revelio:output_type -> RevelioResponse
	13, // 17: LabyrinthGame.Bombarda:output_type -> BombardaResponse
	13, // [13:18] is the sub-list for method output_type
	8,  // [8:13] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_labyrinth_proto_init() }
func file_labyrinth_proto_init() {
	if File_labyrinth_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_labyrinth_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_labyrinth_proto_goTypes,
		DependencyIndexes: file_labyrinth_proto_depIdxs,
		EnumInfos:         file_labyrinth_proto_enumTypes,
		MessageInfos:      file_labyrinth_proto_msgTypes,
	}.Build()
	File_labyrinth_proto = out.File
	file_labyrinth_proto_rawDesc = nil
	file_labyrinth_proto_goTypes = nil
	file_labyrinth_proto_depIdxs = nil
}
